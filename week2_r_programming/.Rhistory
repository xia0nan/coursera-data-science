install.packages("swirl")
library("swirl")
packageVersion("swirl")
install_from_swirl("R Programming")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files())
args(list.files)
old.dir = getwd()
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.create(file.path("testdir2", "testdir3"))
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq = seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
my_seq
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
c( 0.5, 55, -10, 6)
c( 0.5 55 -10 6)
c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "nan")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_char
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5, byrow = FALSE)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
swirl()
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 = 7
6 == 7
6 < 7
10 <= 10
5 != 7
NOT 5 == 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
| TRUE) & c(TRUE, FALSE, FALSE)
c(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
inst > 5
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("cool")
submit()
submit()
mad_libs(place = "paris", adjective = "busy", noun = "flag")
submit()
('I' %p% 'love') %p% 'R!'
'I' %p% 'love' %p% 'R!'
cube <- function(x, n) {
x^3
}
cube(3)
x<- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
swirl()
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
swirl()
swirl()
Sys.Date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
getwd()
current_dir <- getwd()
current_dir
current_dir <- getwd()
current_dir
course_dir <- file.path(current_dir, "coursera")
course_dir
data_dir <- file.path(course_dir, "specdata")
data_dir
rm(list=ls())
current_dir <- getwd()
current_dir
course_dir <- file.path(current_dir, "coursera")
course_dir
data_dir <- file.path(course_dir, "specdata")
data_dir
setwd(course_dir)
print(R.version.string)
week_dir <- file.path(course_dir, "week2")
week_dir
data_dir <- file.path(week_dir, "specdata")
data_dir
setwd(week_dir)
setwd(data_dir)
temp = list.files(pattern="*.csv")
myfiles = lapply(temp, read.delim, header = TRUE)
myfiles[1:2]
myfiles[1:2,]
head(myfiles, 3)
myfiles[1]
summary(myfiles)
dim(myfiles)
rm(myfiles)
filenames = list.files(pattern="*.csv")
data <- rbindlist(lapply(filenames,fread))
rm(filenames)
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
rm(list=ls())
current_dir <- getwd()
current_dir
course_dir <- file.path(current_dir, "coursera")
course_dir
week_dir <- file.path(course_dir, "week2")
week_dir
data_dir <- file.path(week_dir, "specdata")
data_dir
setwd(data_dir)
temp = list.files(pattern="*.csv")
myMergedData <- do.call(rbind,lapply(temp, read.csv))
dim(myMergedData)
class(myMergedData)
head(myMergedData, 4)
myMergedData[1:2]
myMergedData[1:2,]
myMergedData[331:332,]
myMergedData[1462:1465,]
myMergedData[1460:1465,]
myMergedData[ID = 1]
myMergedData[ID == 1]
colnames(myMergedData)
result = myMergedData[myMergedData[, "ID"] == 1:10,]
result = myMergedData[myMergedData[, "ID"] == 1:10,,drop=FALSE]
a <- 1:10
sprintf(%03d, a)
sprintf("%03d", a)
sprintf("%03d.csv", a)
myMergedData <- do.call(rbind,lapply(temp, read.csv))
rm(list=ls())
pollutantmean <- function(directory, pollutant, id = 1:332) {
csv_dir <- file.path(getwd(), directory)
setwd(csv_dir)
temp = sprintf("%03d.csv", a)
myMergedData <- do.call(rbind,lapply(temp, read.csv))
resultMean <- mean(myMergedData$pollutant, na.rm = TRUE)
}
print(R.version.string)
rm(list=ls())
print(R.version.string)
source("pollutantmean.R")
current_dir <- getwd()
current_dir
course_dir <- file.path(current_dir, "coursera")
course_dir
week_dir <- file.path(course_dir, "week2")
week_dir
data_dir <- file.path(week_dir, "specdata")
data_dir
setwd(data_dir)
setwd(week_dir)
getwd()
rm(list=ls())
getwd()
setwd("/Users/nanxiao/Developer/babylon/R/coursera/week2")
getwd()
setwd("/Users/nanxiao/Developer/babylon/R/")
current_dir <- getwd()
current_dir
course_dir <- file.path(current_dir, "coursera")
course_dir
week_dir <- file.path(course_dir, "week2")
week_dir
data_dir <- file.path(week_dir, "specdata")
data_dir
setwd(week_dir)
print(R.version.string)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
print(R.version.string)
rm(list=ls())
setwd("/Users/nanxiao/Developer/babylon/R/")
current_dir <- getwd()
current_dir
course_dir <- file.path(current_dir, "coursera")
course_dir
week_dir <- file.path(course_dir, "week2")
week_dir
data_dir <- file.path(week_dir, "specdata")
data_dir
setwd(week_dir)
print(R.version.string)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
setwd(week_dir)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
ist=ls())
setwd("/Users/nanxiao/Developer/babylon/R/")
current_dir <- getwd()
current_dir
course_dir <- file.path(current_dir, "coursera")
course_dir
week_dir <- file.path(course_dir, "week2")
week_dir
data_dir <- file.path(week_dir, "specdata")
data_dir
setwd(week_dir)
csv_dir <- file.path(getwd(), directory)
setwd(csv_dir)
id = 1:10
directory = "specdata"
csv_dir <- file.path(getwd(), directory)
temp = sprintf("%03d.csv", id)
myMergedData <- do.call(rbind,lapply(temp, read.csv))
setwd(csv_dir)
myMergedData <- do.call(rbind,lapply(temp, read.csv))
pollutant = "sulfate"
myMergedData[pollutant]
mean(myMergedData[pollutant], na.rm = TRUE)
x <- myMergedData[pollutant]
mean(x, na.rm = TRUE)
colMeans(x)
?colMeans
colMeans(x, na.rm = TRUE)
colMeans(myMergedData[pollutant], na.rm = TRUE)
rm(list=ls())
print(R.version.string)
rm(list=ls())
setwd("/Users/nanxiao/Developer/babylon/R/")
current_dir <- getwd()
current_dir
course_dir <- file.path(current_dir, "coursera")
course_dir
week_dir <- file.path(course_dir, "week2")
week_dir
data_dir <- file.path(week_dir, "specdata")
data_dir
setwd(week_dir)
print(R.version.string)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
id <- 1:10
directory = "specdata"
sprintf("%s/%03d.csv", (directory, id))
sprintf("%s/%03d.csv", directory, id)
sprintf("%s//%03d.csv", directory, id)
temp = sprintf("%s/%03d.csv", directory, id)
myMergedData <- do.call(rbind,lapply(temp, read.csv))
getwd()
setwd("..")
getwd()
myMergedData <- do.call(rbind,lapply(temp, read.csv))
print(R.version.string)
rm(list=ls())
setwd("/Users/nanxiao/Developer/babylon/R/")
current_dir <- getwd()
current_dir
course_dir <- file.path(current_dir, "coursera")
course_dir
week_dir <- file.path(course_dir, "week2")
week_dir
data_dir <- file.path(week_dir, "specdata")
data_dir
setwd(week_dir)
print(R.version.string)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
print(R.version.string)
rm(list=ls())
setwd("/Users/nanxiao/Developer/babylon/R/")
current_dir <- getwd()
current_dir
course_dir <- file.path(current_dir, "coursera")
course_dir
week_dir <- file.path(course_dir, "week2")
week_dir
data_dir <- file.path(week_dir, "specdata")
data_dir
setwd(week_dir)
print(R.version.string)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
